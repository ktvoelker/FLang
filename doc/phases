
NEW NEW PHASES
==============

1. Lexing

2. Parsing

3. Module ordering

  Descend over the modules, annotating each node with a set of integers (the things
  referenced by that node and its descendants) and another set of integers (the things
  declared by that node and its descendants).

  Use a work queue of nodes to which the algorithm has come near but hasn't yet
  processed. When processing an item from the work queue, remove it first.

  In general, when descending, allocate new integers to any bindings made at the
  starting node, and then process the child nodes.

  When descending from a record node, allocate new integers for all the immediate
  children of the record. Put all those children into the work queue, then proceed.

  When a Ref can't be dereferenced, that's an error.

  When some step of a Member can't be dereferenced, see if the dereferenceable prefix
  of the Member is in the work queue. If so, process that entry from the work queue,
  and then proceed. If not, it is a circularity error.

  In the end, if there were no errors, then every node is annotated with certain sets
  that define a DAG among the nodes.

  SO...this algorithm seems like it should work, but it doesn't make much sense without
  mutable references.

4. Module interpretation

  Descend over the modules as an interpreter that checks types at runtime.



Phases of Compilation
=====================

1. Lexing

2. Parsing

2.5 FIGURE THIS OUT

  The idea that we could simply extract all sigs while giving almost no attention to
  modules has turned out to be wrong. Consider these questions:

  a. Can a sig exist inside a parameterized module? (We can say no for now.)

  b. If two modules are aliased, and they contain a sig, what is the sig's ModName?

  If we say "no" to (a), then we can solve this problem: instead of an initial
  sig extraction phase, we need a "global extraction" phase. The purpose of
  this phase is to move all globally accessible things (or at least all such
  mods and sigs) into global tables mapped by generated names, and to have a
  second table mapping user-level names to generated names.

  All references to things which exist in the global tables should be replaced by
  ModNames during this phase. The ModNames will refer to the globals directly, by
  the generated name.

  What if we said "yes" to (a)?

  An example might provide some clarification.

3. Sig extraction - build a Map ModName Sig

  a. Check for sigs with duplicate names

  b. Check that parameterized modules don't contain sigs

4. Sig validation - make sure that sigs don't contain duplicate names

5. Sig dereferencing - make sure that all references that should be to sigs are to sigs,
   and update them to use ModNames

5. Module type-checking

  a. Check the sigs of the parameters at each module application

  b. Check that module records don't have duplicate names

  c. Check that module records declare the names required by their sigs, in the right
     namespaces

6. Value type-checking

  a. Check that each value binding has its stated type, and infer missing types if
     possible

7. Materialization

  a. Make a flat table of all value bindings in modules (including the implicit ones
     from data declarations), replacing the definitions in the source with pointers
     into this table

     Note: value bindings in modules must either be functions or constant expressions.

     Note: add an extra outer parameter to each binding for the dictionary.

  b. Find all module expressions, convert each to normal form, and make a dictionary
     for each unique normal-form expression in a table, replacing the module expression
     with a pointer into this table. (Note that this process must be applied inside
     the value table as well.)

  c. Convert Member expressions where the LHS is a ModName into an App of the module
     dictionary to the member's newly-globalized self

  d. Generate code for all the value bindings and module dictionaries.

The Old List:

1. Lexical analysis

2. Syntactic analysis

3. Scope linker (link local scopes to their parents)

4. Name resolution (add a pointer from each ref to its binding) (also make
sure refs don't violate sigs)

5. Module application (generate records for all module applications and update
all module expressions to be refs)

6. Data type-checking (make sure all data declarations are valid)

7. Value type-checking (make sure all value declarations have a correct type
signature; infer missing ones)

8. Module sig-checking (make sure all modules obey their declared sigs)

9. Simplification

10. Optimization

11. Code generation

