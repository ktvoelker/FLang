
TO-DO
=====

Think about nicer function definition syntax, too.

  If we try to just replace the word "val" with "fn" at the head of the decl,
  we have a problem: the function could also be an argument to apply to the previous
  expression.

Bring back a nicer syntax for defining modules and sigs

  And a nicer-yet syntax for modules and sigs which occupy whole files

Make it possible to define an "otherwise" case in a function-case without having to
write one underscore for each argument.

Add simpler syntax for the common cases of algebraic data types

Add syntax for decision tables

Add a new form of type constraints that limit effects

Think about how to solve the problem of the fact that many sigs could be
expressed in many equivalent ways, and whichever of the ways we don't choose
would have provided all kinds of utility functions that will end up defined
outside the sig. But it seems unnatural to force a particular choice of
definining functions across all implementations of that sig.

  This could be a great use of something like datalog. Let the author of the sig
  give rules describing whether or not any particular subset of the functions makes
  a valid implementation.

Think about how to make sigs and modules as easy to use as typeclasses in the common
case.

Add syntax for declaring view types
  This is a data type combined with a function from some other type to that data type.
  The view type cannot be directly pattern-matched - any pattern match using the view
  type implicitly expects a value of the input type, which is then transformed with the
  view function.

Allow patterns in let bindings

