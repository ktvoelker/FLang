
TO-DO
=====

Rewrite the renamer to use the generic traversal

  We didn't properly account for the weirdness of AccumT

  Here's a cleaner solution to replace AccumT: use ST!
    Specifically, we are (almost) always inside some definition. So, let's say that
    when we allocate an entry in the environment, we give it both an Integer and an
    STRef (Set Integer). We also keep a special pointer around to the STRef of the
    current innermost definition. When we see a reference, add it to the set of the
    current innermost definition. When we bubble up out of a definition (i.e., in
    renameDecl), we take all the references of the old innermost definition and copy
    them into the set of its parent.

      Actually, if we have to keep a stack of the definitions we are in, then we
      can just update all of their ST sets when the reference is seen.

      Also, we already have this stack! It's called ePath. We just aren't using it.
      That needs to go into the generic traversal.

      SWEET

Rewrite (and finish) the infix analysis phase to use the generic traversal

Write QuickCheck tests

  It should be fairly simple to generate arbitrary syntax trees and arbitrary lexical
  environments

Write the module type-checker

Write the type type-checker

  Can this be separated from the value type-checker? What needs checking here?

  Note: we need to add variance notation to type variables. What causes this?
    1. Ref a: the a must be invariant

Write the value type-checker

Implement instance Pretty Err

Improve the ECirc errors in the sorter

Consider requiring a special symbol to be prefixed onto any global Ref

Write a structural recursion check as an alternative to the cycle check

Pretty-printer

  * Add appropriate newlines, indentation numbers, and depth numbers
  * Implement smart breaking of long lines
  * Handle operator precedence correctly
  * Clean up the output to be fully ideal

Fix this weird thing: in a case-function, in an else clause, you might want to bind
the arguments to variables. But you can't. So you have to use an "if" with all plain
variables, which just makes it less obvious what it really is. So, allow the else
clause to have pattern bindings. (This can be useful even in normal cases, actually.)

Allow multiple "if" clauses to be stacked with a single result body, so long as all
clauses bind the same set of variables with the same types (or compatible types).

Add syntax for decision tables

Add a new form of type constraints that limit effects

Think about how to solve the problem of the fact that many sigs could be
expressed in many equivalent ways, and whichever of the ways we don't choose
would have provided all kinds of utility functions that will end up defined
outside the sig. But it seems unnatural to force a particular choice of
definining functions across all implementations of that sig.

  This could be a great use of something like datalog. Let the author of the sig
  give rules describing whether or not any particular subset of the functions makes
  a valid implementation.

Think about how to make sigs and modules as easy to use as typeclasses in the common
case.

Add syntax for declaring view types
  This is a data type combined with a function from some other type to that data type.
  The view type cannot be directly pattern-matched - any pattern match using the view
  type implicitly expects a value of the input type, which is then transformed with the
  view function.

Allow patterns in let bindings

Find keywords that can be allowed as identifiers

There is ambiguity in the "open" expression

Figure out how to do lenses nicely

Figure out how to allow sigs inside parameterized modules

Add syntax to allow long strings to be written as multiple adjacent strings which
are concatenated during parsing

Possible improvements to do-notation:

  Functor and Applicative ought to be superclasses of Monad. If they were, we
  could have the ability to use these kinds of functions in do-notation,
  perhaps with a different arrow. That way, you don't have to switch
  programming styles in the middle of a do-block just because you have one step
  that doesn't need full monadic powers.

