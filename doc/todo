
TO-DO
=====

Add simpler syntax for:
  * Value bindings that bind functions
  * Module bindings that bind records
  * Sig bindings

Fix this weird thing: in a case-function, in an else clause, you might want to bind
the arguments to variables. But you can't. So you have to use an "if" with all plain
variables, which just makes it less obvious what it really is. So, allow the else
clause to have pattern bindings. (This can be useful even in normal cases, actually.)

Allow multiple "if" clauses to be stacked with a single result body, so long as all
clauses bind the same set of variables with the same types (or compatible types).

Add simpler syntax for the common cases of algebraic data types

Add syntax for decision tables

Add a new form of type constraints that limit effects

Think about how to solve the problem of the fact that many sigs could be
expressed in many equivalent ways, and whichever of the ways we don't choose
would have provided all kinds of utility functions that will end up defined
outside the sig. But it seems unnatural to force a particular choice of
definining functions across all implementations of that sig.

  This could be a great use of something like datalog. Let the author of the sig
  give rules describing whether or not any particular subset of the functions makes
  a valid implementation.

Think about how to make sigs and modules as easy to use as typeclasses in the common
case.

Add syntax for declaring view types
  This is a data type combined with a function from some other type to that data type.
  The view type cannot be directly pattern-matched - any pattern match using the view
  type implicitly expects a value of the input type, which is then transformed with the
  view function.

Allow patterns in let bindings

Find keywords that can be allowed as identifiers

There is ambiguity in the "open" expression

Write a pretty-printer back to real syntax

